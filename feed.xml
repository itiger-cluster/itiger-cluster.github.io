<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://itiger-cluster.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://itiger-cluster.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2024-04-16T18:24:57+00:00</updated><id>https://itiger-cluster.github.io//feed.xml</id><title type="html">iTiger</title><subtitle>Building an HPC to Help the Mid-South. </subtitle><entry><title type="html">Logging in with SSH Keys</title><link href="https://itiger-cluster.github.io//blog/2024/ssh/" rel="alternate" type="text/html" title="Logging in with SSH Keys"/><published>2024-04-09T00:00:00+00:00</published><updated>2024-04-09T00:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/ssh</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/ssh/"><![CDATA[<h2 id="what-are-ssh-keys">What are SSH Keys?</h2> <p>An SSH key is essentially a form of secure identification between a server and a client(your computer, in this case). In Layman’s terms, this authentication works because data is encrypted using a client’s public key. For the data/communication between a server and client to be understood by that client, the incoming data is decrypted using the client’s unique private key. This type of authentication is more secure than password authentication, as well as more convenient.</p> <hr/> <h2 id="creating-an-ssh-key-pair">Creating an SSH Key Pair</h2> <h3>Mac &amp; Linux Users</h3> <p>To create an SSH-key pair, open your terminal and input the command <code class="language-plaintext highlighter-rouge">ssh-keygen -b 4096 -t rsa</code>. The <code class="language-plaintext highlighter-rouge">-b 4096</code> stands for the bit-size, and the <code class="language-plaintext highlighter-rouge">rsa</code> specifies the type of key created. You’ll be asked to input a passphrase–this is entirely optional, and you can just press enter to bypass this.</p> <p>Your terminal will ask you which directory to put your key-pair in. It’s best to leave it as default.</p> <p>Once you have finished the previous step, there should be two keys within the directory–one that has an ending of <code class="language-plaintext highlighter-rouge">.pub</code>–this is your public key. You will share this with the HPC. The other key is your private key–never share it to anyone or to any network.</p> <h3>Windows Users</h3> <p>There are two ways of generating a key-pair–one is through the terminal, and the other is through PuTTY key generator, which should already be installed on your computer if you connect to the HPC with PuTTY.</p> <h4><strong>Terminal</strong></h4> <p><br/> Open a Powershell terminal with administrator privileges. In there, enter the instructions <code class="language-plaintext highlighter-rouge">ssh-keygen -t (key type of your choice)</code>. Note that <code class="language-plaintext highlighter-rouge">ssh-keygen.exe</code> can generate keys with the DSA, RSA, ECDSA, or Ed25519 algorithms. If you leave the key type blank, the terminal automatically generates an RSA key.</p> <p>There, you should see an output like this: <br/></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Generating public/private (key type) key pair.
  Enter file in which to save the key (C:\Users\username\.ssh\id_rsa)
</code></pre></div></div> <p>You can just enter for this–it’s best to keep the default location. After that, you’ll be requested to enter a passphrase–you can just bypass this by pressing enter twice.</p> <p>After that, you should see that your keys have been saved to the same directory. The terminal will tell you which key is your public key (the key with the <code class="language-plaintext highlighter-rouge">.pub</code> at the end).</p> <h4><strong>PuTTY</strong></h4> <p><br/> To create a public key pair with PuTTy, first open the PuTTy key generator application. It should pop up when you search for <code class="language-plaintext highlighter-rouge">puttygen</code>.</p> <p>Once you click on the application, you should be seeing this:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/keygen-480.webp 480w,/assets/img/keygen-800.webp 800w,/assets/img/keygen-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/keygen.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <p>To generate your keys, simply click on the “Generate” button. If the bar isn’t progressing, move your mouse all around the application–this should move the bar. Now, you should see this screen:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/keygen2-480.webp 480w,/assets/img/keygen2-800.webp 800w,/assets/img/keygen2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/keygen2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <p>Now, click on the highlighted “Conversions” tab and click “Export OpenSSH key”. This generates your private key. It is recommended to store your key in a safe directory, particularly in the default directory mentioned in the other examples in this section:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/keygen3-480.webp 480w,/assets/img/keygen3-800.webp 800w,/assets/img/keygen3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/keygen3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <p>Now, to generate your public key, simply copy the text and paste it all into a text file. Save that text file with the same name as your private key, with .pub added at the end.</p> <hr/> <h2 id="transferring-the-public-key-to-the-hpc">Transferring the Public Key to the HPC</h2> <h3><strong> Mac &amp; Linux Users </strong></h3> <p>The following step is rather simple–in your terminal, type in <code class="language-plaintext highlighter-rouge">ssh-copy-id -i /path/to/id_rsa.pub username@bigblue.memphis.edu</code> <br/> Replace <code class="language-plaintext highlighter-rouge">/path/to/id_rsa.pub</code> with the actual directory/directions to your public key. In addition, replace <code class="language-plaintext highlighter-rouge">username</code> with your username.</p> <h3><strong>Windows Users </strong></h3> <p>Now that you have copied your public key information, you can open up WinSCP and head to your home directory (should be the first directory you’re in). We need to go into the .ssh folder of your home directory, which may be hidden–to find it, simply click on “Find Files” and, in the bar, add a <code class="language-plaintext highlighter-rouge">/.ssh</code> to the address. Click <code class="language-plaintext highlighter-rouge">Start</code>. You should see three files–an id_rsa file, an id_rsa.pub file, and an authorized_keys file. Click on the authorized keys file.</p> <p><br/></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/keygen4-480.webp 480w,/assets/img/keygen4-800.webp 800w,/assets/img/keygen4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/keygen4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/keygen5-480.webp 480w,/assets/img/keygen5-800.webp 800w,/assets/img/keygen5-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/keygen5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <p>Open up a notepad/code editor of your choice. Now, you’ll see a block of text within the authorized keys file–simply go two spaces below it, and paste your public key to the authorized_keys file. Save your change.</p> <p>With that, you should now be able to login to the HPC without a password, thanks to your ssh key!</p> <p><strong>*Note that as a Windows User, you can login passwordless with SSH Keys only through your terminal at this moment. To login with your SSH Key, open your terminal and enter in <code class="language-plaintext highlighter-rouge">ssh username@bigblue.memphis.edu</code>, with the <code class="language-plaintext highlighter-rouge">username</code> replaced with your specific username.</strong></p> <hr/>]]></content><author><name>Mayira Sharif</name></author><category term="user-tutorials"/><summary type="html"><![CDATA[Using ssh keys to login to the HPC ensures passwordless logins]]></summary></entry><entry><title type="html">Submitting a Python Job with Hello World</title><link href="https://itiger-cluster.github.io//blog/2024/hello-world/" rel="alternate" type="text/html" title="Submitting a Python Job with Hello World"/><published>2024-04-04T15:00:00+00:00</published><updated>2024-04-04T15:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/hello-world</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/hello-world/"><![CDATA[<p><strong>Let’s learn how to submit a job to the HPC!</strong></p> <p><strong>Step 1: Write your “hello world” code:</strong> <br/> To start, open up an IDE of your choice and write code that will output “Hello World” into the terminal:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/hello_world_img1-480.webp 480w,/assets/img/hello_world_img1-800.webp 800w,/assets/img/hello_world_img1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/hello_world_img1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> Next, upload your file onto the HPC. Depending on your system/OS, you may have to follow different steps to put your file onto the HPC. For that, follow this [tutorial](/blog/2024/images/) <br/> <br/> Next, we must create a basic BASH file to submit to the HPC. The BASH file acts as sort of a set of instructions for the HPC, including what resources the HPC will provide, the length of the job we shall submit, the modules we will need for the job (in this case, python 3.8.7) and the file we will run ( our python file, which in this case is animal.py ). ``` #!/bin/bash #SBATCH --cpus-per-task=1 #SBATCH --partition=acomputeq #SBATCH --time=0-0:1:2 #SBATCH --job-name=gpurun #SBATCH --mail-user=username@memphis.edu #SBATCH --output=output-%j.out #SBATCH --error=error-%j.err #SBATCH --mem=8GB ################################################# # [SOMETHING] # #-----------------------------------------------# # Please replace anything in [] brackes with # # what you want. # # Example: # # #SBATCH --partition=[PARTITION/QUEUE] # # Becomes: # # #SBATCH --partition=computeq # ################################################# ################################################# # --partition=[PARTITION/QUEUE] # #-----------------------------------------------# # For this script we are assuming: # # gpuq: 40 cores, 192 GB mem, 2 v100 GPUs # ################################################# # --ntasks=[NTASKS] and --nodes=[NNODES] # #-----------------------------------------------# # Number of threads and nodes needed per job. # # Note that there are only 2 GPUs available per # # node. Multiple programs and users may use each# # card at one time, but you may run into # # performance issues. To mitigate this, use more# # --ntasks to reduce overlap. # ################################################# # Go to submission directory cd $SLURM_SUBMIT_DIR ################################################# # modules # #-----------------------------------------------# # Any modules you need can be found with # # 'module avail'. If you compile something with # # a particular compiler using a module, you # # probably want to call that module here. You # # might need one of the cuda modules: # # cuda92/toolkit: nvcc, libraries, etc... # # cuda92/fft: fast fourier transforms # # cuda92/blas: linear algebra # # cuda92/profiler: nvidia profiler, debugging # # cuda92/nsight: IDE, suggested use is with # # 'srun -N1 -n1 -p gpuq --pty --x11 /bin/bash' # # for a GUI terminal # ################################################# module load cuda92/toolkit module load python/3.8.7 python animal.py ################################################# # Run your executable here # ################################################# #[EXECUTABLE] [OPTIONS] ``` <br/> <br/> After we include the right instructions into our BASH file, we are now able to upload/add it to our home directory of the HPC ([link for how to transfer files to the HPC](https://itiger-cluster.github.io/blog/2024/images/)) and use the command `sbatch` to begin the job. Once the job has submitted and finished, you should recieve an output file within your directory--this contains the "hello world" output you'd typically see on your terminal: <br/> <div class="row mt-6"> <div class="col-sm mt-6 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/helloworld2-480.webp 480w,/assets/img/helloworld2-800.webp 800w,/assets/img/helloworld2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/helloworld2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <br/> Open the file in a text editor, and you should see your output! <br/> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/helloworld3-480.webp 480w,/assets/img/helloworld3-800.webp 800w,/assets/img/helloworld3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/helloworld3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div></div></div>]]></content><author><name></name></author><category term="tutorial"/><category term="getting-started"/><summary type="html"><![CDATA[Learn how to submit a job with Python]]></summary></entry><entry><title type="html">Basic SLURM Commands and Terminology</title><link href="https://itiger-cluster.github.io//blog/2024/slurm/" rel="alternate" type="text/html" title="Basic SLURM Commands and Terminology"/><published>2024-04-04T00:00:00+00:00</published><updated>2024-04-04T00:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/slurm</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/slurm/"><![CDATA[<h2 id="basic-slurm-commands">Basic SLURM commands</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Mayira Sharif</name></author><category term="user-tutorials"/><summary type="html"><![CDATA[these commands will help you with jobs and analytics]]></summary></entry><entry><title type="html">Installing A VPN</title><link href="https://itiger-cluster.github.io//blog/2024/code/" rel="alternate" type="text/html" title="Installing A VPN"/><published>2024-03-28T15:00:00+00:00</published><updated>2024-03-28T15:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/code</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/code/"><![CDATA[<p><strong>Obtaining a VPN connection to the University of Memphis is relatively simple. Here’s how:</strong></p> <p><strong>Step 1:</strong> First, you must obtain a VPN client. The University of Memphis primarily uses Anyconnect VPN as its VPN client of choice, so head to this website in order to install the software. Make sure you download the software that corresponds to your computer’s operating system (Mac, Windows, Linux, etc.).</p> <p>The University of Memphis has various <a href="https://www.memphis.edu/umtech/solutions/movies/vpn.php">how-to videos</a> regarding installing VPNs on a variety of devices, including mobile.</p> <p>For more information regarding VPNs, you can contact the University of Memphis Service desk at 901.678.8888. If you have a UofM account, you may also send a <a href="https://memphis.topdesk.net/tas/public/ssp/content/serviceflow?unid=208655c84d544ce68361714f1b34ab4c">service request</a>.</p>]]></content><author><name></name></author><category term="tutorial"/><category term="getting-started"/><summary type="html"><![CDATA[Learn How to Install A VPN to Utilize the UofM HPC]]></summary></entry><entry><title type="html">Submitting Jobs (Slurm)</title><link href="https://itiger-cluster.github.io//blog/2024/github-metadata/" rel="alternate" type="text/html" title="Submitting Jobs (Slurm)"/><published>2024-03-28T15:00:00+00:00</published><updated>2024-03-28T15:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/github-metadata</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/github-metadata/"><![CDATA[<p>Running jobs on HPC requires submitting your jobs to the job scheduler as either Batch (through a submission script) or Interactively. The scheduler will find the resources you requested and will execute your job on those resource when they become available.</p> <h2 id="minimum-requirements-for-slurm-scripts">Minimum Requirements for Slurm Scripts:</h2> <ul> <li>Partition (‘-partition’, ‘p’)</li> <li>CPUs, tasks, or nodes: ‘cpus-per-task’ or ‘-c’ for multiple threads/cores per node/task (pthreads/OpenMP): ‘-ntasks’ or ‘-n’ for multiple message passing tasks (MPI); ‘-nodes’ or ‘-N’ for multiple nodes (MPI)</li> <li>Time (‘-time’ or ‘-t’)</li> <li>Memory (‘mem-per-cpu’ for memory per CPU core; ‘-mem’ for memory per node) <strong>Useful options</strong></li> <li>Job name (‘-job-name’ or ‘-J’) for identification</li> <li>Output and error (‘-output’ or ‘-o’ and ‘-error’ or ‘-e’) to redirect script standard output and error (‘stdout’ and ‘stderr’)</li> <li>Generic RESource (-gres’) used for gpus, licenses, and interconnects</li> </ul> <p>Here’s an example of how your bash script should look like:</p> <div class="row mt-3"> <div class="col-sm-4 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/bash_example-480.webp 480w,/assets/img/bash_example-800.webp 800w,/assets/img/bash_example-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/bash_example.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="metadata"/><summary type="html"><![CDATA[how to submit jobs]]></summary></entry><entry><title type="html">Transferring Files to the HPC</title><link href="https://itiger-cluster.github.io//blog/2024/images/" rel="alternate" type="text/html" title="Transferring Files to the HPC"/><published>2024-03-27T00:00:00+00:00</published><updated>2024-03-27T00:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/images</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/images/"><![CDATA[<h3><bold>Windows:</bold></h3> <p>If your device operates a Windows OS, then you may download the application <a href="http://sourceforge.net/projects/winscp/">winScp</a> onto your desktop and use your login information to connect to the HPC from there. From then on, your winScp tab should look something like this, with your computer files on the left and the your home directory on the HPC on the right: <br/></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/winscp-480.webp 480w,/assets/img/winscp-800.webp 800w,/assets/img/winscp-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/winscp.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <h3><bold>Mac &amp; Linux:</bold></h3> <p>If you are utilizing a Mac or Linux OS, then you will not need to install any application–simply utilize the <code class="language-plaintext highlighter-rouge">scp</code> command on the terminal, after you have logged in to the HPC.</p>]]></content><author><name></name></author><category term="tutorials"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[Learn how to transfer your files to the HPC on either Linux, Mac, or Windows]]></summary></entry><entry><title type="html">Creating an Account</title><link href="https://itiger-cluster.github.io//blog/2024/account/" rel="alternate" type="text/html" title="Creating an Account"/><published>2024-03-26T00:00:00+00:00</published><updated>2024-03-26T00:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2024/account</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2024/account/"><![CDATA[<h2 id="completing-the-form">Completing the Form</h2> <p>Hello, and thank you for your interest in iTiger! To begin the process of gaining access to the iTiger HPC, you must begin with filling out the form found on the <a href="https://itiger-cluster.github.io/requests/">requests page</a>. Note that the form is different for internal and external users (in this case, “internal” means you are affiliated with the University of Memphis and “external” means you are not affiliated).</p> <p>Please wait for 3 - 5 business days to recieve a response from the University of Memphis IT department.</p> <hr/> <h2 id="setting-up-software--terminal">Setting Up Software / Terminal</h2> <p>Once you have recieved an email from IT, your next steps are to set up your device to connect to the HPC.</p> <p><strong>For External Users:</strong> If you are an external user, it is important to know that the only way to access the UofM HPC is by being connected to the University of Memphis network by VPN. Setting up this VPN is relatively simple–follow these <a href="https://www.memphis.edu/umtech/solutions/vpn.php">tutorials</a> provided by the University of Memphis.</p> <p><strong>For Windows Users:</strong> In order to access the HPC, you must download either <a href="http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY</a> or <a href="https://mobaxterm.mobatek.net/">mobaXterm</a>.</p> <p>Once you have installed PuTTY, execute the program, and you should see a window that looks like this: <br/></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/configuration-480.webp 480w,/assets/img/configuration-800.webp 800w,/assets/img/configuration-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/configuration.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>For the entry titled <code class="language-plaintext highlighter-rouge">Host Name</code>, enter <code class="language-plaintext highlighter-rouge">bigblue.memphis.edu</code>. Keep the other options as default, and click on <code class="language-plaintext highlighter-rouge">Open</code>.</p> <p><br/></p> <p>From then, you’ll see a new terminal window open up. When it says <code class="language-plaintext highlighter-rouge">login as:</code>, put in your UofM username. The password it asks for next is just your password that you use to login to your UofM account.</p> <p><br/> <strong>For Linux and MacOS:</strong> You can gain access by logging in with “ssh” via the terminal or shell:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh [username]@hpclogin.memphis.edu
</code></pre></div></div> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh [username]@bigblue.memphis.edu
</code></pre></div></div> <p>In addition, X2Go works on both MacOS and Windows. Here is how to connect to the HPC:</p> <ul> <li>Host: hpclogin.memphis.edu</li> <li>Login: username[your UofM username]</li> <li>SSH Port: 22</li> <li>Session Type: XFCE</li> </ul> <p>In both cases, after you entered in your valid login information, you should see the words <strong>BIG BLUE</strong> printed onto your terminal:</p> <p><br/></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/terminal-480.webp 480w,/assets/img/terminal-800.webp 800w,/assets/img/terminal-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/terminal.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><br/></p> <p>You have now learned how to connect to the HPC! For next steps, including learning basic SLURM commands, click [here].</p>]]></content><author><name>Weisi Liu</name></author><category term="getting-started"/><summary type="html"><![CDATA[How to set up your account on the HPC]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://itiger-cluster.github.io//blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://itiger-cluster.github.io//blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">Basic SLURM Commands and Terminology</title><link href="https://itiger-cluster.github.io//blog/2011/distill/" rel="alternate" type="text/html" title="Basic SLURM Commands and Terminology"/><published>2011-05-22T00:00:00+00:00</published><updated>2011-05-22T00:00:00+00:00</updated><id>https://itiger-cluster.github.io//blog/2011/distill</id><content type="html" xml:base="https://itiger-cluster.github.io//blog/2011/distill/"><![CDATA[<h2 id="basic-slurm-commands">Basic SLURM commands</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Mayira Sharif</name></author><category term="user-tutorials"/><summary type="html"><![CDATA[these commands will help you with jobs and analytics]]></summary></entry></feed>